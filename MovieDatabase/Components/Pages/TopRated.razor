@page "/toprated"
@using Models
@using MovieDatabase.Services
@inject IMovieService MovieService
@inject NavigationManager navigationManager

<PageTitle>Home</PageTitle>

<div class="pages">

<button class="pages-button" @onclick="async () => await ChangePage(currentPage - 1)" disabled="@(!CanGoPrev)">Prev</button>

<span class="pages-number">
    Page <input type="number"
                min="1"
                max="@totalPages"
                @bind-value="inputPage"
                @bind-value:event="oninput"
                @onkeydown="HandleEnter"
                style="width: 60px; text-align: center;" />

    of @totalPages
</span>

<button class="pages-button" @onclick="async () => await ChangePage(currentPage + 1)" disabled="@(!CanGoNext)">Next</button>

</div>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <div class="movie-list">
        @foreach (var movie in trendingResult)
        {
            <div class="MovieList" @onclick="() => OpenDetails(movie.Id)">


                <div>
                    <img src="@movie.FullPosterUrl" alt="@movie.MovieTitle" class="movie" />
                <div class="movie-details">
                </div>
                    <p class="movieInfo">@movie.MovieTitle</p>
                    <p class="movieInfo-date text-gray-700">Date aired: @movie.ReleaseDate</p>
                    <p class="movieInfo-rating">⭐ @movie.Rating.ToString("0.0") / 10</p>

                </div>


            </div>
        }
    </div>
}

<div class="pages">

<button class="pages-button" @onclick="async () => await ChangePage(currentPage - 1)" disabled="@(!CanGoPrev)">Prev</button>

<span class="pages-number">
    Page <input type="number"
                min="1"
                max="@totalPages"
                @bind-value="inputPage"
                @bind-value:event="oninput"
                @onkeydown="HandleEnter" />

    of @totalPages
</span>

<button class="pages-button" @onclick="async () => await ChangePage(currentPage + 1)" disabled="@(!CanGoNext)">Next</button>

</div>



@code{
    private List<Movie> trendingResult = new();
    [SupplyParameterFromQuery(Name = "page")]
    public int PageFromQuery { get; set; } = 1;
    private bool isLoading = false;
    private int currentPage = 1;
    private int totalPages = 1;
    private int inputPage = 1;
    private bool CanGoPrev => currentPage > 1;
    private bool CanGoNext => currentPage < totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadMovieAsync(currentPage);
    }

    protected override async Task OnParametersSetAsync()
    {
        await ChangePage(PageFromQuery);
    }
    private async Task LoadMovieAsync(int page)
    {
        isLoading = true;
        try
        {
            var result = await MovieService.TopRatedMoviesAsync(page);

            trendingResult = result.Results;
            currentPage = result.Page;
            totalPages = result.TotalPages;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"API Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
    public void OpenDetails(int movieId)
    {
        navigationManager.NavigateTo($"/movie/{movieId}");
    }
    private void GoToPage(int page)
    {
        navigationManager.NavigateTo($"/toprated?page={page}", forceLoad: false);
    }

    private async Task NextPage()
    {
        if (CanGoNext)
        {
            currentPage++;
            GoToPage(currentPage);
            await LoadMovieAsync(currentPage);
        }
    }

    private async Task PrevPage()
    {
        if (CanGoPrev)
        {
            currentPage--;
            GoToPage(currentPage);
            await LoadMovieAsync(currentPage);

        }
    }

    private async Task ChangePage(int page)
    {
        if (page < 1) page = 1;
        if (totalPages > 0 && page > totalPages) page = totalPages;

        currentPage = page;
        inputPage = page;

        // update URL without full reload
        navigationManager.NavigateTo($"/toprated?page={page}", forceLoad: false);

        await LoadMovieAsync(page);

        StateHasChanged(); // ensure UI updates immediately
    }


   

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ChangePage(inputPage);
        }
    }

}

<style>
    .MovieList {
        width: 220px;
        min-height: 380px;
        border-radius: 20px;
        border: 1px solid #ddd;
        box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        overflow: hidden;
        display:flex;
        flex-direction: column;
        justify-content: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .MovieList:hover{
        transform: scale(1.05);
            box-shadow: 0 6px 12px rgba(0,0,0,0.4);
            z-index: 10;
    }

    .movie {
        border-top-left-radius: 20px;
        border-top-right-radius: 20px;
        width: 100%;
        height: 280px;
        object-fit: cover;
    }

    .movieInfo {
        padding-left: 20px;
        margin: 0;
        font-weight: bold;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: normal;
        line-height: 1.2em;
        min-height: calc(1.2em * 2); 
        max-height: calc(1.2em * 2);
    }

    .movieInfo-date {
        padding-left: 20px;
        padding-top: 2px;
        padding-bottom: 2px;
        margin: 0;
        color: dimgray;
        display: -webkit-box;
        -webkit-box-orient: vertical;
        -webkit-line-clamp: 2;
        overflow: hidden;
    }

    .movieInfo-rating {
        display: inline-block;
        background: gold;
        color: black;
        font-weight: bold;
        padding: 2px 8px;
        border-radius: 12px;
        font-size: 0.9rem;
        margin-left: 20px;
    }

    .movie-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        padding: 10px 15px;
    }

    .movie-list {
        margin: 20px;
        display: grid;
        gap: 20px;
        grid-template-columns: repeat(5, 1fr);
        flex-direction: column;
    }
    .pages{
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin: 20px 0;
    }
    .pages-button{
        background-color: cornflowerblue;
        border:none;
        color: white;
        font-weight: bold;
        padding: 8px 16px;
        border-radius: 20px;
        cursor: pointer;
        transition: background-color 0.2s ease, transform 0.2s ease;
    }
    .pages-button:hover:not(:disabled){
        background-color: royalblue;
        transform: scale(1.05);
    }
    .pages-button:disabled{
        background-color: lightgray;
        cursor: not-allowed;
    }
    .pages-number{
        font-weight: bold;
        font-size: 1rem;
        color: dimgray;
        display:flex;
        align-items: center;
        gap: 6px;
    }
    .pages-input {
        width: 50px;
        padding: 4px;
        margin: 0 5px;
        border-radius: 6px;
        border: 1px solid #ccc;
        text-align: center;
    }
</style>